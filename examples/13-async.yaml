settings:
  shell: /bin/bash
  shieldEnv: true

# tame -f examples/14-async-usage.yaml ParallelJobsSuccess
ParallelJobsSuccess:
  # the second step will run without waiting for the first to finish
  run:
    - sh: for i in {1..2}; do echo "first job...$i"; sleep 1; done
      opts: async
    - sh: for i in {1..2}; do echo "second job...$i"; sleep 1; done
      opts: async
  # the last async opt is not actually needed, it's there to demonstrate that at the end of the target
  # we wait for all async steps to finish, before continuing

ParallelJobsFailure:
  # the second step will run without waiting for the first to finish
  # when the first step fails, the second step will terminate too
  run:
    - sh: echo "i will fail in 2 sec"; sleep 2; exit 42
      opts: async
    - sh: for i in {1..4}; do echo "second job...$i"; sleep 1; done
      opts: async
  # the execution will finish early since the first job fails

ParallelJobsAllowedFailure:
  # the second step will finish, even though the first one failed,
  # this is due to the allow-fail option
  run:
    - sh: echo "i will fail in 2 sec"; sleep 2; exit 42
      opts: [async, allow-fail]
    - sh: for i in {1..4}; do echo "second job...$i"; sleep 1; done
      opts: async

ParallelForLoopSteps:
  run:
    # Each step will execute in Parallel
    - for: { $name: ["Alice", "Bob", "Cathy"] }
      do:
      - sh: echo "Hi ${name}!" && sleep 1
        opts: async
        # each inner step inside do is async but the for loop step itself is not so it waits at the end of the inner steps
        # until each inner step finishes
    - sh: echo "DONE"

ParallelForLoop:
  run:
    # Each step will execute in Parallel
    - for: { $name: ["Alice", "Bob", "Cathy"] }
      do:
      - sh: echo "Hi ${name}!" && sleep 1
        opts: async
        # each inner step inside do is async
      opts: async # the for loop itself is async
    - sh: echo "DONE"

ParallelResults:
  run:
    # Each step will execute in Parallel
    - for: { $name: ["Alice", "Bob", "Cathy"] }
      do:
      - sh: echo "Hi ${name}!" && sleep 1
        opts: async
        =: $result
      - sh: echo "WE WAIT"
      - wait: {}  # wait for all async jobs to finish, otherwise $result variables would be empty
      - sh: echo result was $result
        # each inner step inside do is async
      opts: async # the for loop itself is async
    - sh: echo "DONE"

ParallelThenSeq:
  run:
    - sh: for i in {1..4}; do echo "first job...$i"; sleep 1; done
      opts: async
    - sh: echo "I will run"
    - sh: echo "I too will run"
    # at the end of the target, tame waits for the async steps to finish
    # add a return step to skip waiting for the async steps to finish

ParallelReturn:
  run:
    - sh: for i in {1..4}; do echo "first job...$i"; sleep 1; done
      opts: async
      =: $result
    - sh: echo "I will run"
    - wait: {} # wait waits for all async steps in the target to finish
    - return: $result # return does not wait for async steps to finish, so $result would be unset
