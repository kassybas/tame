# variables start with $ sign
$foo: "my global value"

# Targets allow multiple steps, arguments, variables and returns
# targets can be set internal by starting them with lowercase letter
# internal targets cannot be included from other file or called from cli

# simple targets contain one script, it can be called with the following command
# tame -f examples/01-hello-world.yaml Hello
Hello: echo "hello world"

# tame -f examples/01-hello-world.yaml HelloGlobal
# global variables are added to the environment variable of the script
# this differs from Makefiles since there the expansion of values happens before script execution
HelloGlobal: echo "hello ${foo}"

# tame -f examples/01-hello-world.yaml HelloLocal
# more comples targets contain multople steps under the run keyword
HelloLocal:
  run:
  - $name: "john doe"
  - sh: echo "hello $name"

# tame -f examples/01-hello-world.yaml HelloArg
# arguments can be added with default value
# all arguments are named arguments
# default value can be set to null, requiring it to be passed during the call
# in single line yaml syntax, null can be omitted, eg: args: {$name}
HelloArg:
  args: {$name: "my default name"}
  run:
  - sh: echo "hello $name"

# tame -f examples/01-hello-world.yaml HelloCall
# calling other targets in steps is possible
HelloCall:
  run:
  - Hello: {} # no arguments
  - HelloArg: {$name: "passing an argument"}  # one named argument
