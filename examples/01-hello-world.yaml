# variables start with $ sign
# global variables are immutable
$foo: "my global value"

# Targets allow multiple steps, arguments, variables and returns.
# Targets are internal when starting with lowercase letter.
# Internal targets cannot be included from other files or called from the CLI.

# Targets can be called with the following command: tame TARGET_NAME
# eg. tame -f examples/01-hello-world.yaml Hello
# In simple target format is the following:
Hello: echo "hello world"

# tame -f examples/01-hello-world.yaml HelloGlobal
# global variables are added to the environment variable of the script
# this differs from Makefiles since there the expansion of values happens before script execution
HelloGlobal: echo "hello ${foo}"

# more complex targets contain multiple steps under the run keyword
# tame -f examples/01-hello-world.yaml HelloLocal
HelloLocal:
  run:
  - $name: "john doe"  # declare variable
  - sh: echo "hello $name"

# Arguments can be added with default value.
# All arguments are named, no positional args.
# If the default value is set to null, it is required to be passed during the call.
# Arguments can also be passed from CLI eg. `tame HelloArg --name="foo"`
# tame -f examples/01-hello-world.yaml HelloArg
HelloArg:
  args: {$name: "my default name"}
  run:
  - sh: echo "hello argument $name"

# tame -f examples/01-hello-world.yaml HelloCall
# calling other targets in steps is possible
HelloCall:
  # Summary provides documentation in helpscreen.
  # Helpscreen is displayed when tame is called without a target, eg: tame -f tame/file.yaml
  summary: Calls two other targets
  run:
  - Hello: {} # no arguments in target
  - HelloArg: {$name: "passing an argument"}  # one named argument
  - HelloArg: {}  # no argument passed -> HelloArg default argument will be used
