settings:
  init: "set -eu"
  shieldEnv: true

$version:
  major: "0"
  minor: "2"
  patch: "0"
$platforms:
  - os: "linux"
    arch: "amd64"
  - os: "linux"
    arch: "386"
  - os: "darwin"
    arch: "amd64"
  - os: "darwin"
    arch: "386"
  - os: "freebsd"
    arch: "amd64"
  - os: "freebsd"
    arch: "386"

$dockerImage: "kassybas/tame"

Version:
  run:
  - sh: awk -F'"' '/app.Version/{print $2}' main.go
    =: $cliVersion
    opts: silent
  - $relVersion: (format("%v.%v.%v", [$version.major, $version.minor, $version.patch]))
  - if: ($cliVersion != $relVersion)
    then:
      sh: |
        echo "ERROR CLI version does not match release version"
        echo "$cliVersion (cli) != $relVersion (release)"
        exit 1
    else:
    - return: $relVersion

LocalBuild:
  run:
  - sh: go build -o bin/tame -ldflags "-s -w"

BuildAll:
  run:
  - cleanBin: {}
  - for: {$platform: $platforms}
    do:
    - Build: { $os: $platform.os, $arch: $platform.arch}
      opts: async

Build:
  args: { $os, $arch }
  run:
  - sh: |
      echo "Building: ${os}:${arch}..."
      mkdir -p bin
      GOOS=${os} GOARCH=${arch} go build -o bin/tame_${os}_${arch} -ldflags "-s -w"

DockerBuild:
  run:
  - Version: {}
    =: $tag
  - sh: |
      docker build -t ${dockerImage}:${tag} .

cleanBin:
  run:
    - sh: rm -rf ./bin/*

Test:
  run:
  - sh: go test ./...
